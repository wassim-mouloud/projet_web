{"ast":null,"code":"import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\nconst numVariantProps = variantProps.length;\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n  constructor({\n    parent,\n    props,\n    presenceContext,\n    reducedMotionConfig,\n    blockInitialAnimation,\n    visualState\n  }, options = {}) {\n    this.resolveKeyframes = (keyframes,\n    // We use an onComplete callback here rather than a Promise as a Promise\n    // resolution is a microtask and we want to retain the ability to force\n    // the resolution of keyframes synchronously.\n    onComplete, name, value) => {\n      return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n    };\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n    this.propEventSubscriptions = {};\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n    this.scheduleRender = () => frame.render(this.render, false, true);\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = {\n      ...latestValues\n    };\n    this.initialValues = props.initial ? {\n      ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n    for (const key in this.features) {\n      this.features[key].unmount();\n    }\n    this.current = null;\n  }\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (value.owner) value.stop();\n    });\n  }\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n  loadFeatures({\n    children,\n    ...renderedProps\n  }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n    let ProjectionNodeConstructor;\n    let MeasureLayout;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n      const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n    }\n    for (let i = 0; i < numFeatures; i++) {\n      const name = featureNames[i];\n      const {\n        isEnabled,\n        Feature: FeatureConstructor,\n        ProjectionNode,\n        MeasureLayout: MeasureLayoutComponent\n      } = featureDefinitions[name];\n      if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n      if (isEnabled(renderedProps)) {\n        if (!this.features[name] && FeatureConstructor) {\n          this.features[name] = new FeatureConstructor(this);\n        }\n        if (MeasureLayoutComponent) {\n          MeasureLayout = MeasureLayoutComponent;\n        }\n      }\n    }\n    if ((this.type === \"html\" || this.type === \"svg\") && !this.projection && ProjectionNodeConstructor) {\n      this.projection = new ProjectionNodeConstructor(this.latestValues, getClosestProjectingNode(this.parent));\n      const {\n        layoutId,\n        layout,\n        drag,\n        dragConstraints,\n        layoutScroll,\n        layoutRoot\n      } = renderedProps;\n      this.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: this,\n        scheduleRender: () => this.scheduleRender(),\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialLayoutGroupConfig,\n        layoutScroll,\n        layoutRoot\n      });\n    }\n    return MeasureLayout;\n  }\n  updateFeatures() {\n    for (const key in this.features) {\n      const feature = this.features[key];\n      if (feature.isMounted) {\n        feature.update();\n      } else {\n        feature.mount();\n        feature.isMounted = true;\n      }\n    }\n  }\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.options, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n      const listener = props[\"on\" + key];\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n  getVariantContext(startAtParent = false) {\n    if (startAtParent) {\n      return this.parent ? this.parent.getVariantContext() : undefined;\n    }\n    if (!this.isControllingVariants) {\n      const context = this.parent ? this.parent.getVariantContext() || {} : {};\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n      return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n  addValue(key, value) {\n    // Remove existing value if it exists\n    if (value !== this.values.get(key)) {\n      this.removeValue(key);\n      this.bindToMotionValue(key, value);\n    }\n    this.values.set(key, value);\n    this.latestValues[key] = value.get();\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n  hasValue(key) {\n    return this.values.has(key);\n  }\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n    let value = this.values.get(key);\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n  readValue(key, target) {\n    var _a;\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n  getBaseTarget(key) {\n    var _a, _b;\n    const {\n      initial\n    } = this.props;\n    const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_b = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom)) === null || _b === void 0 ? void 0 : _b[key] : undefined;\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n    return this.events[eventName].add(callback);\n  }\n  notify(eventName, ...args) {\n    if (this.events[eventName]) {\n      this.events[eventName].notify(...args);\n    }\n  }\n}\nexport { VisualElement };","map":{"version":3,"names":["warning","invariant","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","variantProps","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","frame","cancelFrame","featureNames","Object","keys","numFeatures","length","propEventHandlers","numVariantProps","getClosestProjectingNode","visualElement","undefined","options","allowProjection","projection","parent","VisualElement","constructor","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","resolveKeyframes","keyframes","onComplete","name","value","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","scheduleRender","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","scrapeMotionValuesFromProps","key","set","add","_props","_prevProps","_visualElement","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","update","unmount","delete","remove","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","loadFeatures","renderedProps","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","MeasureLayout","strictMessage","ignoreStrict","i","isEnabled","Feature","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","updateFeatures","feature","isMounted","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","listener","handleChildMotionValue","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","prop","child","closestVariantNode","addValue","get","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","_b","valueFromInitial","custom","eventName","callback","args"],"sources":["/Users/wassimmouloud/coding_projects/projet_web/client/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        this.resolveKeyframes = (keyframes, \n        // We use an onComplete callback here rather than a Promise as a Promise\n        // resolution is a microtask and we want to retain the ability to force\n        // the resolution of keyframes synchronously.\n        onComplete, name, value) => {\n            return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n        };\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, getClosestProjectingNode(this.parent));\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a, _b;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_b = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom)) === null || _b === void 0 ? void 0 : _b[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}